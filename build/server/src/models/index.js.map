{"version":3,"sources":["../../../../api/server/src/models/index.js"],"names":["basename","__filename","env","process","NODE_ENV","config","require","__dirname","db","sequelize","use_env_variable","Sequelize","database","username","password","filter","file","indexOf","slice","forEach","model","name","Object","keys","modelName","associate"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA,IAAMA,QAAQ,GAAG,oBAAUC,UAAV,CAAjB;AACA,IAAMC,GAAG,GAAGC,OAAO,CAACD,GAAR,CAAYE,QAAZ,IAAwB,aAApC;;AACA,IAAMC,MAAM,GAAGC,OAAO,CAACC,SAAS,GAAG,sBAAb,CAAP,CAA4CL,GAA5C,CAAf;;AACA,IAAMM,EAAE,GAAG,EAAX;AAEA,IAAIC,SAAJ;;AACA,IAAIJ,MAAM,CAACK,gBAAX,EAA6B;AAC3BD,EAAAA,SAAS,GAAG,IAAIE,qBAAJ,CAAcR,OAAO,CAACD,GAAR,CAAYG,MAAM,CAACK,gBAAnB,CAAd,EAAoDL,MAApD,CAAZ;AACD,CAFD,MAEO;AACLI,EAAAA,SAAS,GAAG,IAAIE,qBAAJ,CAAcN,MAAM,CAACO,QAArB,EAA+BP,MAAM,CAACQ,QAAtC,EAAgDR,MAAM,CAACS,QAAvD,EAAiET,MAAjE,CAAZ;AACD;;AAED,qBAAYE,SAAZ,EACGQ,MADH,CACU,UAAAC,IAAI,EAAI;AACd,SAAQA,IAAI,CAACC,OAAL,CAAa,GAAb,MAAsB,CAAvB,IAA8BD,IAAI,KAAKhB,QAAvC,IAAqDgB,IAAI,CAACE,KAAL,CAAW,CAAC,CAAZ,MAAmB,KAA/E;AACD,CAHH,EAIGC,OAJH,CAIW,UAAAH,IAAI,EAAI;AACf,MAAMI,KAAK,GAAGX,SAAS,CAAC,QAAD,CAAT,CAAoB,gBAAKF,SAAL,EAAgBS,IAAhB,CAApB,CAAd;AACAR,EAAAA,EAAE,CAACY,KAAK,CAACC,IAAP,CAAF,GAAiBD,KAAjB;AACD,CAPH;AASAE,MAAM,CAACC,IAAP,CAAYf,EAAZ,EAAgBW,OAAhB,CAAwB,UAAAK,SAAS,EAAI;AACnC,MAAIhB,EAAE,CAACgB,SAAD,CAAF,CAAcC,SAAlB,EAA6B;AAC3BjB,IAAAA,EAAE,CAACgB,SAAD,CAAF,CAAcC,SAAd,CAAwBjB,EAAxB;AACD;AACF,CAJD;AAMAA,EAAE,CAACC,SAAH,GAAeA,SAAf;AACAD,EAAE,CAACG,SAAH,GAAeA,qBAAf;eAEeH,E","sourcesContent":["import { readdirSync } from 'fs';\nimport { basename as _basename, join } from 'path';\nimport Sequelize from 'sequelize';\nconst basename = _basename(__filename);\nconst env = process.env.NODE_ENV || 'development';\nconst config = require(__dirname + '/../config/config.js')[env];\nconst db = {};\n\nlet sequelize;\nif (config.use_env_variable) {\n  sequelize = new Sequelize(process.env[config.use_env_variable], config);\n} else {\n  sequelize = new Sequelize(config.database, config.username, config.password, config);\n}\n\nreaddirSync(__dirname)\n  .filter(file => {\n    return (file.indexOf('.') !== 0) && (file !== basename) && (file.slice(-3) === '.js');\n  })\n  .forEach(file => {\n    const model = sequelize['import'](join(__dirname, file));\n    db[model.name] = model;\n  });\n\nObject.keys(db).forEach(modelName => {\n  if (db[modelName].associate) {\n    db[modelName].associate(db);\n  }\n});\n\ndb.sequelize = sequelize;\ndb.Sequelize = Sequelize;\n\nexport default db;\n"],"file":"index.js"}