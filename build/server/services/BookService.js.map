{"version":3,"sources":["../../../api/server/services/BookService.js"],"names":["BookService","database","Book","findAll","newBook","create","id","updateBook","findOne","where","Number","bookToUpdate","update","theBook","bookToDelete","destroy","deletedBook"],"mappings":";;;;;;;;;;;;;;;AAAA;;IAEMA,W;;;;;;;;;;;;;;;;mDAGaC,mBAASC,IAAT,CAAcC,OAAd,E;;;;;;;;;;;;;;;;;;;4BAMIC,O;;;;;;;mDAEJH,mBAASC,IAAT,CAAcG,MAAd,CAAqBD,OAArB,C;;;;;;;;;;;;;;;;;;;+BAMOE,E,EAAIC,W;;;;;;;;mDAEGN,mBAASC,IAAT,CAAcM,OAAd,CAAsB;AAC/CC,gBAAAA,KAAK,EAAE;AAAEH,kBAAAA,EAAE,EAAEI,MAAM,CAACJ,EAAD;AAAZ;AADwC,eAAtB,C;;;AAArBK,cAAAA,Y;;mBAIFA,Y;;;;;;mDACIV,mBAASC,IAAT,CAAcU,MAAd,CAAqBL,WAArB,EAAiC;AAAEE,gBAAAA,KAAK,EAAE;AAAEH,kBAAAA,EAAE,EAAEI,MAAM,CAACJ,EAAD;AAAZ;AAAT,eAAjC,C;;;gDACCC,W;;;gDAEF,I;;;;;;;;;;;;;;;;6BAMWD,E;;;;;;;;mDAEIL,mBAASC,IAAT,CAAcM,OAAd,CAAsB;AAC1CC,gBAAAA,KAAK,EAAE;AAAEH,kBAAAA,EAAE,EAAEI,MAAM,CAACJ,EAAD;AAAZ;AADmC,eAAtB,C;;;AAAhBO,cAAAA,O;gDAGCA,O;;;;;;;;;;;;;;;;+BAMaP,E;;;;;;;;mDAEOL,mBAASC,IAAT,CAAcM,OAAd,CAAsB;AAAEC,gBAAAA,KAAK,EAAE;AAAEH,kBAAAA,EAAE,EAAEI,MAAM,CAACJ,EAAD;AAAZ;AAAT,eAAtB,C;;;AAArBQ,cAAAA,Y;;mBAEFA,Y;;;;;;mDACwBb,mBAASC,IAAT,CAAca,OAAd,CAAsB;AAC9CN,gBAAAA,KAAK,EAAE;AAAEH,kBAAAA,EAAE,EAAEI,MAAM,CAACJ,EAAD;AAAZ;AADuC,eAAtB,C;;;AAApBU,cAAAA,W;gDAGCA,W;;;gDAEF,I;;;;;;;;;;;;;;;;;;eAOEhB,W","sourcesContent":["import database from '../src/models';\n\nclass BookService {\n  static async getAllBooks() {\n    try {\n      return await database.Book.findAll();\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  static async addBook(newBook) {\n    try {\n      return await database.Book.create(newBook);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  static async updateBook(id, updateBook) {\n    try {\n      const bookToUpdate = await database.Book.findOne({\n        where: { id: Number(id) }\n      });\n\n      if (bookToUpdate) {\n        await database.Book.update(updateBook, { where: { id: Number(id) }});\n        return updateBook;\n      }\n      return null;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  static async getABook(id) {\n    try {\n      const theBook = await database.Book.findOne({\n        where: { id: Number(id) }\n      });\n      return theBook;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  static async deleteBook(id) {\n    try {\n      const bookToDelete = await database.Book.findOne({ where: { id: Number(id) }});\n\n      if (bookToDelete) {\n        const deletedBook = await database.Book.destroy({\n          where: { id: Number(id) }\n        });\n        return deletedBook;\n      }\n      return null;\n    } catch (error) {\n      throw error;\n    }\n  }\n}\n\nexport default BookService;"],"file":"BookService.js"}